diff --git a/node_modules/runeterra/src/Card.js b/node_modules/runeterra/src/Card.js
index ee6851a..431e6cf 100644
--- a/node_modules/runeterra/src/Card.js
+++ b/node_modules/runeterra/src/Card.js
@@ -26,4 +26,8 @@ module.exports = class Card {
   get id () {
     return parseInt(this.code.substring(4, 7))
   }
+
+  get version () {
+    return Faction.getVersion(this.code.substring(2, 4))
+  }
 }
diff --git a/node_modules/runeterra/src/DeckEncoder.js b/node_modules/runeterra/src/DeckEncoder.js
index 4a890aa..d915317 100644
--- a/node_modules/runeterra/src/DeckEncoder.js
+++ b/node_modules/runeterra/src/DeckEncoder.js
@@ -15,8 +15,13 @@ class DeckEncoder {
     }
 
     const firstByte = bytes.shift()
+    const format = firstByte >> 4
     const version = firstByte & 0xF
 
+    if (format !== DeckEncoder.FORMAT) {
+      throw new TypeError('The provided code does not match the required format.')
+    }
+
     if (version > DeckEncoder.MAX_KNOWN_VERSION) {
       throw new TypeError('The provided code requires a higher version of this library; please update.')
     }
@@ -68,7 +73,7 @@ class DeckEncoder {
     const nOfs = cards.filter(c => c.count > 3)
 
     return Base32.encode([
-      0x11,
+      DeckEncoder.FORMAT << 4 | cards.reduce((p, c) => Math.max(p, c.version), 0) & 0xF,
       ...this.encodeGroup(grouped3),
       ...this.encodeGroup(grouped2),
       ...this.encodeGroup(grouped1),
@@ -138,6 +143,8 @@ class DeckEncoder {
   }
 }
 
-DeckEncoder.MAX_KNOWN_VERSION = 3
+DeckEncoder.MAX_KNOWN_VERSION = 4
+DeckEncoder.FORMAT = 1
+DeckEncoder.INITIAL_VERSION = 1
 
 module.exports = DeckEncoder
diff --git a/node_modules/runeterra/src/Faction.js b/node_modules/runeterra/src/Faction.js
index 0082aa1..03c57d4 100644
--- a/node_modules/runeterra/src/Faction.js
+++ b/node_modules/runeterra/src/Faction.js
@@ -5,7 +5,7 @@ class Faction {
   }
 
   static fromCode (code) {
-    const factionId = Faction.FACTIONS[code]
+    const [factionId] = Faction.FACTIONS[code] || []
 
     if (factionId === undefined) {
       throw new TypeError('Invalid faction code. It is possible you need to upgrade the runeterra package.')
@@ -15,7 +15,7 @@ class Faction {
   }
 
   static fromID (id) {
-    const [shortCode, factionId] = Object.entries(Faction.FACTIONS).find(([shortCode, factionId]) => factionId === id) || []
+    const [shortCode, [factionId]] = Object.entries(Faction.FACTIONS).find(([, [factionId]]) => factionId === id) || [undefined, []]
 
     if (factionId === undefined) {
       throw new TypeError('Invalid faction id. It is possible you need to upgrade the runeterra package.')
@@ -23,18 +23,29 @@ class Faction {
 
     return new this(shortCode, factionId)
   }
+
+  static getVersion (code) {
+    const [, version] = Faction.FACTIONS[code] || []
+
+    if (version === undefined) {
+      throw new TypeError('Invalid faction code. It is possible you need to upgrade the runeterra package.')
+    }
+
+    return version
+  }
 }
 
 Faction.FACTIONS = {
-  DE: 0,
-  FR: 1,
-  IO: 2,
-  NX: 3,
-  PZ: 4,
-  SI: 5,
-  BW: 6,
-  MT: 9,
-  SH: 7
+  DE: [0, 1],
+  FR: [1, 1],
+  IO: [2, 1],
+  NX: [3, 1],
+  PZ: [4, 1],
+  SI: [5, 1],
+  BW: [6, 2],
+  MT: [9, 2],
+  SH: [7, 3],
+  BC: [10, 4]
 }
 
 module.exports = Faction
